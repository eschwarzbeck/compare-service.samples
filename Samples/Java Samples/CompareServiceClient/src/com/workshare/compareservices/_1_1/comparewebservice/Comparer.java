package com.workshare.compareservices._1_1.comparewebservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import com.workshare.compareservices._5_0.comparewebservice.IComparer;
import com.workshare.compareservices._5_2.comparewebservice.IComparerChunked;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.1
 * 2014-07-30T11:35:09.823+01:00
 * Generated source version: 3.0.1
 * 
 */
@WebServiceClient(name = "Comparer", 
                  wsdlLocation = "http://localhost:8080/Comparer?wsdl",
                  targetNamespace = "http://workshare.com/compareservices/1.1/comparewebservice/") 
public class Comparer extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://workshare.com/compareservices/1.1/comparewebservice/", "Comparer");
    public final static QName CompareWebServiceSoap = new QName("http://workshare.com/compareservices/1.1/comparewebservice/", "CompareWebServiceSoap");
    public final static QName CompareWebServiceWCF = new QName("http://workshare.com/compareservices/1.1/comparewebservice/", "CompareWebServiceWCF");
    public final static QName CompareWebServiceWCFChunked = new QName("http://workshare.com/compareservices/1.1/comparewebservice/", "CompareWebServiceWCF_Chunked");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/CompareWebService.svc?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Comparer.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/CompareWebService.svc?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Comparer(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Comparer(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Comparer() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Comparer(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Comparer(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public Comparer(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns ILegacyComparer
     */
    @WebEndpoint(name = "CompareWebServiceSoap")
    public ILegacyComparer getCompareWebServiceSoap() {
        return super.getPort(CompareWebServiceSoap, ILegacyComparer.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ILegacyComparer
     */
    @WebEndpoint(name = "CompareWebServiceSoap")
    public ILegacyComparer getCompareWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(CompareWebServiceSoap, ILegacyComparer.class, features);
    }
    /**
     *
     * @return
     *     returns IComparer
     */
    @WebEndpoint(name = "CompareWebServiceWCF")
    public IComparer getCompareWebServiceWCF() {
        return super.getPort(CompareWebServiceWCF, IComparer.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IComparer
     */
    @WebEndpoint(name = "CompareWebServiceWCF")
    public IComparer getCompareWebServiceWCF(WebServiceFeature... features) {
        return super.getPort(CompareWebServiceWCF, IComparer.class, features);
    }
    /**
     *
     * @return
     *     returns IComparerChunked
     */
    @WebEndpoint(name = "CompareWebServiceWCF_Chunked")
    public IComparerChunked getCompareWebServiceWCFChunked() {
        return super.getPort(CompareWebServiceWCFChunked, IComparerChunked.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IComparerChunked
     */
    @WebEndpoint(name = "CompareWebServiceWCF_Chunked")
    public IComparerChunked getCompareWebServiceWCFChunked(WebServiceFeature... features) {
        return super.getPort(CompareWebServiceWCFChunked, IComparerChunked.class, features);
    }

}
